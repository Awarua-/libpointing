#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# building-and-packaging/mac/update_brew_port
#
# Initial software
# Authors: Izzat Mukhanov
# Copyright Â© Inria

import subprocess
import os
import sys
import re

HERE = os.path.dirname(os.path.abspath(sys.argv[0]))

if 'LIBPOINTING_VERSION' in os.environ:
    VERSION = os.environ['LIBPOINTING_VERSION']
else:
    PARENT = os.path.relpath(os.path.abspath(os.path.join(HERE, "..")), os.getcwd())
    os.chdir(PARENT)
    VERSION = subprocess.Popen("./libpointing-version", stdout=subprocess.PIPE).communicate()[0].strip()
    os.chdir(HERE)


HOMEBREW_REPO = "libpointing-homebrew"
HOMEBREW_REPO_FILE = HOMEBREW_REPO + "/Formula/libpointing.rb"
LIBPOINTING_FOLDER = "libpointing-%s"%VERSION

print "Cloning homebrew script repo"
os.system("git clone https://${GITHUB_API_KEY}@github.com/INRIA/libpointing-homebrew")

os.chdir(HERE)
# Copy the source code and generate a Makefile
print "Copying the source code and generating a Makefile..."
subprocess.Popen(['./prepare']).wait()
print "Compiling and archiving..."
# Execute the Makefile to generate tarball and copy checksum
os.chdir(LIBPOINTING_FOLDER)
sha256_val = subprocess.Popen('make tarball', shell=True, stdout=subprocess.PIPE).stdout.read().split()[-1]
os.chdir(HERE)

with open(os.path.join(HERE, HOMEBREW_REPO_FILE), "r") as ruby_file:
    new_script = ruby_file.read()

to_subs = 'url "https://github.com/INRIA/libpointing/releases/download/v%s/libpointing-mac-%s.tar.gz'%(VERSION, VERSION) + '"'
replaced = re.sub('url ".*"', to_subs, new_script)
to_subs = 'sha256 ' + '"' + sha256_val + '"'
replaced = re.sub('sha256 ".*"', to_subs, replaced, 1)

os.chdir(HOMEBREW_REPO)
os.system("git remote add upstream https://github.com/Homebrew/homebrew-core.git")
os.system("git fetch upstream")
os.system("git rebase upstream/master") # Update with upstream

# This step is necessary to avoid having multiple commits on libpointing-branch
# Since homebrew demands a single commit for a single update
# So if we have other commits not merged with upstream - they are ignored.
# As we perform forced push to libpointing-branch
os.system("git branch -D libpointing") # Remove local branch libpointing
os.system("git checkout -b libpointing") # Now create new branch

print "Making changes to the formula description in " + HOMEBREW_REPO_FILE
with open(os.path.join(HERE, HOMEBREW_REPO_FILE), "w") as ruby_file:
    ruby_file.write(replaced)
os.system("git add -u")
os.system("git commit -m 'Update libpointing %s'"%VERSION)

print "Pushing formula changes"
os.system("git push --set-upstream origin libpointing --force")

PORTFILE = "macports/devel/libpointing/Portfile"

# Create a new Portfile to release
with open(os.path.join(HERE, PORTFILE), "r") as port_file:
    port_contents = port_file.read()

to_subs = 'version'.ljust(20) + VERSION + "\n"
replaced = re.sub('version.*\n', to_subs, port_contents, 1)
to_subs = 'sha256    ' + sha256_val + "\n"
replaced = re.sub('sha256 .*\n', to_subs, replaced, 1)

with open(os.path.join(HERE, "Portfile"), "w") as port_file:
    port_file.write(replaced)